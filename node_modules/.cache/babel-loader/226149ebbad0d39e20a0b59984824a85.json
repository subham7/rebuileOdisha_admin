{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from \"../reducers\";\nvar exampleInitialState = {}; // export const actionTypes = {\n//     TICK: 'TICK',\n//     INCREMENT: 'INCREMENT',\n//     DECREMENT: 'DECREMENT',\n//     RESET: 'RESET'\n//   }\n// export const reducer = (state = exampleInitialState, action) => {\n//     switch (action.type) {\n//       case actionTypes.TICK:\n//         return Object.assign({}, state, {\n//           lastUpdate: action.ts,\n//           light: !!action.light\n//         })\n//       case actionTypes.INCREMENT:\n//         return Object.assign({}, state, {\n//           count: state.count + 1\n//         })\n//       case actionTypes.DECREMENT:\n//         return Object.assign({}, state, {\n//           count: state.count - 1\n//         })\n//       case actionTypes.RESET:\n//         return Object.assign({}, state, {\n//           count: exampleInitialState.count\n//         })\n//       default:\n//         return state\n//     }\n//   }\n// export const serverRenderClock = isServer => dispatch => {\n//     return dispatch({ type: actionTypes.TICK, light: !isServer, ts: Date.now() })\n//   }\n//   export const startClock = dispatch => {\n//     return setInterval(() => {\n//       // Dispatch `TICK` every 1 second\n//       dispatch({ type: actionTypes.TICK, light: true, ts: Date.now() })\n//     }, 1000)\n//   }\n//   export const incrementCount = () => dispatch => {\n//     return dispatch({ type: actionTypes.INCREMENT })\n//   }\n//   export const decrementCount = () => dispatch => {\n//     return dispatch({ type: actionTypes.DECREMENT })\n//   }\n//   export const resetCount = () => dispatch => {\n//     return dispatch({ type: actionTypes.RESET })\n//   }\n\nexport function initializeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}","map":{"version":3,"sources":["/Users/subham/Desktop/work/react_boilerplate/src/store/index.js"],"names":["createStore","applyMiddleware","compose","thunkMiddleware","composeWithDevTools","rootReducer","exampleInitialState","initializeStore","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,IAAMC,mBAAmB,GAAG,EAA5B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,GAA6D;AAAA,MAApCC,YAAoC,uEAArBF,mBAAqB;AAClE,SAAON,WAAW,CAChBK,WADgB,EAEhBG,YAFgB,EAGhBJ,mBAAmB,CAACH,eAAe,CAACE,eAAD,CAAhB,CAHH,CAAlB;AAKD","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport rootReducer from \"../reducers\"\n\nconst exampleInitialState = {}\n\n\n// export const actionTypes = {\n//     TICK: 'TICK',\n//     INCREMENT: 'INCREMENT',\n//     DECREMENT: 'DECREMENT',\n//     RESET: 'RESET'\n//   }\n// export const reducer = (state = exampleInitialState, action) => {\n//     switch (action.type) {\n//       case actionTypes.TICK:\n//         return Object.assign({}, state, {\n//           lastUpdate: action.ts,\n//           light: !!action.light\n//         })\n//       case actionTypes.INCREMENT:\n//         return Object.assign({}, state, {\n//           count: state.count + 1\n//         })\n//       case actionTypes.DECREMENT:\n//         return Object.assign({}, state, {\n//           count: state.count - 1\n//         })\n//       case actionTypes.RESET:\n//         return Object.assign({}, state, {\n//           count: exampleInitialState.count\n//         })\n//       default:\n//         return state\n//     }\n//   }\n  \n// export const serverRenderClock = isServer => dispatch => {\n//     return dispatch({ type: actionTypes.TICK, light: !isServer, ts: Date.now() })\n//   }\n  \n//   export const startClock = dispatch => {\n//     return setInterval(() => {\n//       // Dispatch `TICK` every 1 second\n//       dispatch({ type: actionTypes.TICK, light: true, ts: Date.now() })\n//     }, 1000)\n//   }\n  \n//   export const incrementCount = () => dispatch => {\n//     return dispatch({ type: actionTypes.INCREMENT })\n//   }\n  \n//   export const decrementCount = () => dispatch => {\n//     return dispatch({ type: actionTypes.DECREMENT })\n//   }\n  \n//   export const resetCount = () => dispatch => {\n//     return dispatch({ type: actionTypes.RESET })\n//   }\nexport function initializeStore(initialState = exampleInitialState) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  )\n}"]},"metadata":{},"sourceType":"module"}