{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { productCategories } from \"../../../../src/reduxHelper\";\nexport default function init(WrappedComponent) {\n  var App =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(App, _Component);\n\n    function App(props) {\n      _classCallCheck(this, App);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    }\n\n    _createClass(App, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (!this.props.productCategories.isLoaded) {\n          var urlParams = {};\n          urlParams.businessID = this.props.businesses.response.data.businessID;\n          this.props.getProductCategories(urlParams);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (this.props.productCategories.isLoaded) return React.createElement(WrappedComponent, this.props);else return React.createElement(\"h1\", null, \"Loading... \");\n      }\n    }]);\n\n    return App;\n  }(Component);\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      businesses: state.businesses,\n      productCategories: state.productCategories\n    };\n  };\n\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n      getProductCategories: function getProductCategories(businessID) {\n        return dispatch(productCategories.action(businessID));\n      }\n    };\n  };\n\n  return connect(mapStateToProps, mapDispatchToProps)(App);\n}","map":{"version":3,"sources":["/Users/subham/Desktop/work/skip/skip-frontend/pages/dashboard/.products/.products/wrapper.js"],"names":["React","Component","connect","productCategories","init","WrappedComponent","App","props","isLoaded","urlParams","businessID","businesses","response","data","getProductCategories","mapStateToProps","state","mapDispatchToProps","dispatch","action"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,eAAe,SAASC,IAAT,CAAcC,gBAAd,EAAgC;AAAA,MACvCC,GADuC;AAAA;AAAA;AAAA;;AAE3C,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8EACXA,KADW;AAElB;;AAJ0C;AAAA;AAAA,0CAMvB;AAClB,YAAI,CAAC,KAAKA,KAAL,CAAWJ,iBAAX,CAA6BK,QAAlC,EAA4C;AAC1C,cAAIC,SAAS,GAAG,EAAhB;AACAA,UAAAA,SAAS,CAACC,UAAV,GAAuB,KAAKH,KAAL,CAAWI,UAAX,CAAsBC,QAAtB,CAA+BC,IAA/B,CAAoCH,UAA3D;AACA,eAAKH,KAAL,CAAWO,oBAAX,CAAgCL,SAAhC;AACD;AACF;AAZ0C;AAAA;AAAA,+BAclC;AACP,YAAI,KAAKF,KAAL,CAAWJ,iBAAX,CAA6BK,QAAjC,EACE,OAAO,oBAAC,gBAAD,EAAsB,KAAKD,KAA3B,CAAP,CADF,KAEK,OAAO,8CAAP;AACN;AAlB0C;;AAAA;AAAA,IAC3BN,SAD2B;;AAqB7C,MAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,WAAK;AAChCL,MAAAA,UAAU,EAAEK,KAAK,CAACL,UADc;AAEhCR,MAAAA,iBAAiB,EAAEa,KAAK,CAACb;AAFO,KAAL;AAAA,GAA7B;;AAKA,MAAMc,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,WAAK;AACtCJ,MAAAA,oBAAoB,EAAE,8BAAAJ,UAAU;AAAA,eAC9BQ,QAAQ,CAACf,iBAAiB,CAACgB,MAAlB,CAAyBT,UAAzB,CAAD,CADsB;AAAA;AADM,KAAL;AAAA,GAAnC;;AAKA,SAAOR,OAAO,CACZa,eADY,EAEZE,kBAFY,CAAP,CAGLX,GAHK,CAAP;AAID","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { productCategories } from \"../../../../src/reduxHelper\"\n\nexport default function init(WrappedComponent) {\n  class App extends Component {\n    constructor(props) {\n      super(props)\n    }\n\n    componentDidMount() {\n      if (!this.props.productCategories.isLoaded) {\n        let urlParams = {}\n        urlParams.businessID = this.props.businesses.response.data.businessID\n        this.props.getProductCategories(urlParams)\n      }\n    }\n\n    render() {\n      if (this.props.productCategories.isLoaded)\n        return <WrappedComponent {...this.props} />\n      else return <h1>Loading... </h1>\n    }\n  }\n\n  const mapStateToProps = state => ({\n    businesses: state.businesses,\n    productCategories: state.productCategories\n  })\n\n  const mapDispatchToProps = dispatch => ({\n    getProductCategories: businessID =>\n      dispatch(productCategories.action(businessID))\n  })\n\n  return connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n}\n"]},"metadata":{},"sourceType":"module"}