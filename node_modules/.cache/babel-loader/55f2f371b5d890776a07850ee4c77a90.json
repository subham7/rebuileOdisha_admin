{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { taxCategories } from \"../../../../src/reduxHelper\";\nexport default function init(WrappedComponent) {\n  var App =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(App, _React$Component);\n\n    function App(props) {\n      _classCallCheck(this, App);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    }\n\n    _createClass(App, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        // load taxCategories if not in state\n        if (!this.props.taxCategories.response) {\n          var urlParams = {};\n          urlParams.businessID = this.props.businesses.response.data.businessID;\n          this.props.getTaxCategories(urlParams).then(function (user) {}).catch(function (err) {});\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (this.props.taxCategories.isLoaded) {\n          return React.createElement(WrappedComponent, this.props);\n        } else {\n          // taxCategoreis cannot be loaded\n          return React.createElement(\"h1\", null, \"Loading\");\n        }\n      }\n    }]);\n\n    return App;\n  }(React.Component);\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      taxCategories: state.taxCategories,\n      businesses: state.businesses\n    };\n  };\n\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n      getTaxCategories: function getTaxCategories(businessID) {\n        return dispatch(taxCategories.action(businessID));\n      }\n    };\n  };\n\n  return connect(mapStateToProps, mapDispatchToProps)(App);\n}","map":{"version":3,"sources":["/Users/subham/Desktop/work/skip/skip-frontend/pages/dashboard/.taxes/.taxes/wrapper.js"],"names":["React","connect","taxCategories","init","WrappedComponent","App","props","response","urlParams","businessID","businesses","data","getTaxCategories","then","user","catch","err","isLoaded","Component","mapStateToProps","state","mapDispatchToProps","dispatch","action"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,eAAe,SAASC,IAAT,CAAcC,gBAAd,EAAgC;AAAA,MACvCC,GADuC;AAAA;AAAA;AAAA;;AAE3C,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8EACXA,KADW;AAElB;;AAJ0C;AAAA;AAAA,0CAMvB;AAClB;AACA,YAAI,CAAC,KAAKA,KAAL,CAAWJ,aAAX,CAAyBK,QAA9B,EAAwC;AACtC,cAAIC,SAAS,GAAG,EAAhB;AACAA,UAAAA,SAAS,CAACC,UAAV,GAAuB,KAAKH,KAAL,CAAWI,UAAX,CAAsBH,QAAtB,CAA+BI,IAA/B,CAAoCF,UAA3D;AACA,eAAKH,KAAL,CACGM,gBADH,CACoBJ,SADpB,EAEGK,IAFH,CAEQ,UAAAC,IAAI,EAAI,CAAE,CAFlB,EAGGC,KAHH,CAGS,UAAAC,GAAG,EAAI,CAAE,CAHlB;AAID;AACF;AAhB0C;AAAA;AAAA,+BAkBlC;AACP,YAAI,KAAKV,KAAL,CAAWJ,aAAX,CAAyBe,QAA7B,EAAuC;AACrC,iBAAO,oBAAC,gBAAD,EAAsB,KAAKX,KAA3B,CAAP;AACD,SAFD,MAEO;AACL;AACA,iBAAO,0CAAP;AACD;AACF;AAzB0C;;AAAA;AAAA,IAC3BN,KAAK,CAACkB,SADqB;;AA2B7C,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,WAAK;AAChClB,MAAAA,aAAa,EAAEkB,KAAK,CAAClB,aADW;AAEhCQ,MAAAA,UAAU,EAAEU,KAAK,CAACV;AAFc,KAAL;AAAA,GAA7B;;AAKA,MAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,WAAK;AACtCV,MAAAA,gBAAgB,EAAE,0BAAAH,UAAU;AAAA,eAAIa,QAAQ,CAACpB,aAAa,CAACqB,MAAd,CAAqBd,UAArB,CAAD,CAAZ;AAAA;AADU,KAAL;AAAA,GAAnC;;AAIA,SAAOR,OAAO,CACZkB,eADY,EAEZE,kBAFY,CAAP,CAGLhB,GAHK,CAAP;AAID","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { taxCategories } from \"../../../../src/reduxHelper\"\n\nexport default function init(WrappedComponent) {\n  class App extends React.Component {\n    constructor(props) {\n      super(props)\n    }\n\n    componentDidMount() {\n      // load taxCategories if not in state\n      if (!this.props.taxCategories.response) {\n        let urlParams = {}\n        urlParams.businessID = this.props.businesses.response.data.businessID\n        this.props\n          .getTaxCategories(urlParams)\n          .then(user => {})\n          .catch(err => {})\n      }\n    }\n\n    render() {\n      if (this.props.taxCategories.isLoaded) {\n        return <WrappedComponent {...this.props} />\n      } else {\n        // taxCategoreis cannot be loaded\n        return <h1>Loading</h1>\n      }\n    }\n  }\n  const mapStateToProps = state => ({\n    taxCategories: state.taxCategories,\n    businesses: state.businesses\n  })\n\n  const mapDispatchToProps = dispatch => ({\n    getTaxCategories: businessID => dispatch(taxCategories.action(businessID))\n  })\n\n  return connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n}\n"]},"metadata":{},"sourceType":"module"}