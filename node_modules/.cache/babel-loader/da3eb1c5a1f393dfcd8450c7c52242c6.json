{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\n//  Reference url https://medium.com/skyshidigital/simplify-redux-request-success-failure-pattern-ce77340eae06\nfunction reduxHelper(actionName, fn) {\n  if (typeof actionName !== \"string\") {\n    throw new Error(\"actionName must be a string\");\n  }\n\n  if (typeof fn !== \"function\") {\n    throw new Error(\"fn must be a function\");\n  }\n\n  var actionNameUpper = actionName.toUpperCase();\n  var actionRequest = actionNameUpper + \"_REQUEST\";\n  var actionSuccess = actionNameUpper + \"_SUCCESS\";\n  var actionFailure = actionNameUpper + \"_FAILURE\";\n  var initialState = {\n    response: null,\n    loading: false,\n    isLoaded: false,\n    error: null\n  };\n\n  var reducer = function reducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case actionRequest:\n        return _objectSpread({}, state, {\n          loading: true\n        });\n\n      case actionSuccess:\n        return _objectSpread({}, state, {\n          loading: false,\n          isLoaded: true,\n          response: action.data !== undefined ? action.data : null\n        });\n\n      case actionFailure:\n        return _objectSpread({}, state, {\n          loading: false,\n          error: action.error\n        });\n\n      default:\n        return state;\n    }\n  }; // we are not using arrow function, because there no arguments binding\n  // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n\n  var action = function action() {\n    console.log(\"working on action\");\n    var args = arguments; // console.log(typeof args, args);\n\n    return function (dispatch) {\n      dispatch({\n        type: actionRequest\n      });\n\n      try {\n        var result = fn.apply(null, args); // It's a promise\n\n        if (typeof result.then === \"function\") {\n          return result.then(function (data) {\n            dispatch({\n              type: actionSuccess,\n              data: data\n            });\n            return _Promise.resolve(data.data);\n          }).catch(function (error) {\n            dispatch({\n              type: actionFailure,\n              error: error\n            });\n            return _Promise.reject(error);\n          });\n        } else {\n          dispatch({\n            type: actionSuccess,\n            data: result\n          });\n          return _Promise.resolve();\n        }\n      } catch (error) {\n        dispatch({\n          type: actionFailure,\n          error: error\n        });\n        return _Promise.reject(error);\n      }\n    };\n  };\n\n  return {\n    action: action,\n    actionTypes: {\n      request: actionRequest,\n      success: actionSuccess,\n      failure: actionFailure\n    },\n    reducer: reducer\n  };\n}\n\nexport default reduxHelper;","map":{"version":3,"sources":["/Users/subham/Desktop/work/react_boilerplate/src/utils/reduxCodeGenerator/index.js"],"names":["reduxHelper","actionName","fn","Error","actionNameUpper","toUpperCase","actionRequest","actionSuccess","actionFailure","initialState","response","loading","isLoaded","error","reducer","state","action","type","data","undefined","console","log","args","arguments","dispatch","result","apply","then","resolve","catch","reject","actionTypes","request","success","failure"],"mappings":"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","sourcesContent":["//  Reference url https://medium.com/skyshidigital/simplify-redux-request-success-failure-pattern-ce77340eae06\nfunction reduxHelper(actionName, fn) {\n    if (typeof actionName !== \"string\") {\n      throw new Error(\"actionName must be a string\")\n    }\n    if (typeof fn !== \"function\") {\n      throw new Error(\"fn must be a function\")\n    }\n    const actionNameUpper = actionName.toUpperCase()\n    const actionRequest = actionNameUpper + \"_REQUEST\"\n    const actionSuccess = actionNameUpper + \"_SUCCESS\"\n    const actionFailure = actionNameUpper + \"_FAILURE\"\n  \n    const initialState = {\n      response: null,\n      loading: false,\n      isLoaded: false,\n      error: null\n    }\n  \n    const reducer = (state = initialState, action) => {\n      switch (action.type) {\n        case actionRequest:\n          return {\n            ...state,\n            loading: true\n          }\n  \n        case actionSuccess:\n          return {\n            ...state,\n            loading: false,\n            isLoaded: true,\n            response: action.data !== undefined ? action.data : null\n          }\n  \n        case actionFailure:\n          return {\n            ...state,\n            loading: false,\n            error: action.error\n          }\n  \n        default:\n          return state\n      }\n    }\n  \n    // we are not using arrow function, because there no arguments binding\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n    const action = function() {\n      console.log(\"working on action\")\n      const args = arguments\n      // console.log(typeof args, args);\n      return dispatch => {\n        dispatch({\n          type: actionRequest\n        })\n        try {\n          const result = fn.apply(null, args)\n          // It's a promise\n          if (typeof result.then === \"function\") {\n            return result\n              .then(data => {\n                dispatch({\n                  type: actionSuccess,\n                  data\n                })\n                return Promise.resolve(data.data)\n              })\n              .catch(error => {\n                dispatch({\n                  type: actionFailure,\n                  error\n                })\n                return Promise.reject(error)\n              })\n          } else {\n            dispatch({\n              type: actionSuccess,\n              data: result\n            })\n            return Promise.resolve()\n          }\n        } catch (error) {\n          dispatch({\n            type: actionFailure,\n            error\n          })\n          return Promise.reject(error)\n        }\n      }\n    }\n  \n    return {\n      action,\n      actionTypes: {\n        request: actionRequest,\n        success: actionSuccess,\n        failure: actionFailure\n      },\n      reducer\n    }\n  }\n  \n  export default reduxHelper"]},"metadata":{},"sourceType":"module"}